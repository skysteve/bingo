{"version":3,"file":null,"sources":["../../tmp/cast_receiver/index.js"],"sourcesContent":["const elMessageList = document.querySelector('#messageList');\nwindow.castReceiverManager = cast.receiver.CastReceiverManager.getInstance();\nvar customMessageBus = window.castReceiverManager.getCastMessageBus('urn:x-cast:skysteve.bingo');\nconst elLatest = document.querySelector('#latest_number');\nconst elTable = document.querySelector('#tableLastCalled');\nconst elToast = document.querySelector('#toastMsg');\n// listen for messages from the caller and update the display\ncustomMessageBus.onMessage = (e) => {\n    if (typeof e.data === 'string') {\n        e.data = JSON.parse(e.data);\n    }\n    let toastData;\n    switch (e.data.messageType) {\n        case 'caller_connected':\n            toastData = {\n                message: 'Bingo Caller is connected',\n                timeout: 3000\n            };\n            elToast.MaterialSnackbar.showSnackbar(toastData);\n            // tell the caller we're alive\n            customMessageBus.broadcast({\n                messageType: 'display_connected'\n            });\n            break;\n        case 'caller_disconnected':\n            toastData = {\n                message: 'Bingo Caller has disconnected',\n                timeout: 10000\n            };\n            elToast.MaterialSnackbar.showSnackbar(toastData);\n            break;\n        case 'called':\n            elLatest.textContent = e.data.number;\n            elTable.setCalled(e.data.number);\n            break;\n        case 'reset':\n            elTable.reset();\n            elLatest.textContent = '-';\n            break;\n        case 'active_game':\n            // if our display re-connects we get an update of the current state of the game, so replicate it\n            elLatest.textContent = e.data.latestNumber || '-';\n            elTable.reset();\n            e.data.calledNumbers.forEach(number => elTable.setCalled(number));\n            break;\n        default:\n            console.warn('Unknown message type', e.data);\n    }\n};\nwindow.castReceiverManager.start();\n"],"names":[],"mappings":";;;AAAA,MAAM,aAAa,GAAG,QAAQ,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC;AAC7D,MAAM,CAAC,mBAAmB,GAAG,IAAI,CAAC,QAAQ,CAAC,mBAAmB,CAAC,WAAW,EAAE,CAAC;AAC7E,IAAI,gBAAgB,GAAG,MAAM,CAAC,mBAAmB,CAAC,iBAAiB,CAAC,2BAA2B,CAAC,CAAC;AACjG,MAAM,QAAQ,GAAG,QAAQ,CAAC,aAAa,CAAC,gBAAgB,CAAC,CAAC;AAC1D,MAAM,OAAO,GAAG,QAAQ,CAAC,aAAa,CAAC,kBAAkB,CAAC,CAAC;AAC3D,MAAM,OAAO,GAAG,QAAQ,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC;;AAEpD,gBAAgB,CAAC,SAAS,GAAG,CAAC,CAAC,KAAK;IAChC,IAAI,OAAO,CAAC,CAAC,IAAI,KAAK,QAAQ,EAAE;QAC5B,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;KAC/B;IACD,IAAI,SAAS,CAAC;IACd,QAAQ,CAAC,CAAC,IAAI,CAAC,WAAW;QACtB,KAAK,kBAAkB;YACnB,SAAS,GAAG;gBACR,OAAO,EAAE,2BAA2B;gBACpC,OAAO,EAAE,IAAI;aAChB,CAAC;YACF,OAAO,CAAC,gBAAgB,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;;YAEjD,gBAAgB,CAAC,SAAS,CAAC;gBACvB,WAAW,EAAE,mBAAmB;aACnC,CAAC,CAAC;YACH,MAAM;QACV,KAAK,qBAAqB;YACtB,SAAS,GAAG;gBACR,OAAO,EAAE,+BAA+B;gBACxC,OAAO,EAAE,KAAK;aACjB,CAAC;YACF,OAAO,CAAC,gBAAgB,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;YACjD,MAAM;QACV,KAAK,QAAQ;YACT,QAAQ,CAAC,WAAW,GAAG,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC;YACrC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACjC,MAAM;QACV,KAAK,OAAO;YACR,OAAO,CAAC,KAAK,EAAE,CAAC;YAChB,QAAQ,CAAC,WAAW,GAAG,GAAG,CAAC;YAC3B,MAAM;QACV,KAAK,aAAa;;YAEd,QAAQ,CAAC,WAAW,GAAG,CAAC,CAAC,IAAI,CAAC,YAAY,IAAI,GAAG,CAAC;YAClD,OAAO,CAAC,KAAK,EAAE,CAAC;YAChB,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,MAAM,IAAI,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC;YAClE,MAAM;QACV;YACI,OAAO,CAAC,IAAI,CAAC,sBAAsB,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC;KACpD;CACJ,CAAC;AACF,MAAM,CAAC,mBAAmB,CAAC,KAAK,EAAE,CAAC;;"}